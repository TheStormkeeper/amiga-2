	incdir	'gam:macros/'
	include	custom.i
SETAIR:	MACRO
	dc.w	\1
	dc.l	\2+6,\3
	dc.w	\4
	endm
SETSEA:	MACRO
	dc.l	\1+6,\2
	dc.w	\3
	endm
	section	a,code_c
o:
	movem.l	d0-d7/a0-a6,-(a7)
	bsr.w	setplane
	move.l	#231,d0
	move.l	#scrbuf,d1
	lea	rplines,a0
cre2:	move.l	d1,(a0)+
	add.l	#40*4,d1
	dbra	d0,cre2

	bsr.w	calc_values
	bsr.w	pre_st
	bsr.w	StartCopper
	move.w	#1,intenbl
	bsr.w	startint
re_lopp:
	move.b	#$ef,openi
	move.l	#$ff0,yoffset
	bsr.w	calc_values
	bsr.w	pre_st
	clr.w	bacount
.loop:
	bsr.w	press_line
	add.w	#1,bacount
	cmp.w	#200,bacount
	bne.b	.loop
	bsr.w	repair
	bsr.w	double_buffer
	bsr.w	repair
	bsr.w	double_buffer
.lopq:
	bsr	wait_wb
	move.l	#3,d0
.loopq:	dbf	d0,.loopq
	sub.b	#$1,openi
	cmp.b	#$25,openi
	bne	.lopq
start1:
	bsr.w	wait_wb
	move.l	#15,herost
	move.w	#161,herost+4
	move.w	#210,herost+6
	bsr.w	sethero
start3:
	bsr.w	wait_wb
	bsr.w	sethero
	sub.w	#1,herost+6
	cmp.w	#70,herost+6
	beq.b	patlaemi
	bsr.w	wait_wb
	cmp.w	#110,herost+6
	bne.b	start3
start4:
	move.l	#$5,d0
.loop:	bsr.w	wait_wb
	dbf	d0,.loop
	bsr.w	sethero
	sub.w	#1,herost+6
	sub.w	#1,planecount
	bne.b	start4
	move.w	#12,planecount
	sub.l	#1,herost
	cmp.l	#9,herost
	beq.w	real_start
	bra.b	start4
patlaemi:
	sub.l	#1,hak
	move.w	#1,intenbl
	move.w	herost+4,contx
	move.w	herost+6,conty
	move.w	#300,herost+6
	bsr.w	sethero
	move.w	#5,expco
patl:
	bsr.w	wait_wb
	bsr.w	repair
	bsr.b	expresso
	bsr.w	double_buffer
	move.l	#60000,d7
.loop:	dbra	d7,.loop
	sub.w	#1,expco
	cmp.w	#-1,expco
	bne.b	patl
	cmp.l	#0,hak
	beq	exitprg
	bra.w	re_lopp
stackbf:dc.l	0
contx:	dc.w	0
conty:	dc.w	0
expco:	dc.w	6
expresso:
	lea	expvenob.blt+2,a0
	lea	expvenob.mask+2,a1
	clr.l	d1
	move.w	expco,d1
	move.l	d1,d2
	mulu	#6*32*4,d1
	mulu	#6*32,d2
	lea	0(a1,d2),a1
	lea	0(a0,d1),a0
	moveq.l	#0,d1
	moveq.l	#0,d2
	move.w	conty,d1
	mulu	#40*4,d1
	move.w	contx,d2
	move.w	d2,d3
	lsr.w	#3,d2
	and.b	#$fe,d2
	add.w	d2,d1
	move.l	workplane,a2
	add.l	d1,a2

	lsl.w	#8,d3
	lsl.w	#4,d3
	bsr.w	w_blit
	and.l	#$f000,d3
	move.w	d3,bltcon1
	ori.w	#$fca,d3
	move.w	d3,bltcon0
	move.l	#-1,bltafwm
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#34+[40*3],bltcmod
	move.w	#34+[40*3],bltdmod
	moveq.l	#3,d3
.loop:
	bsr.w	w_blit
	move.l	a1,bltapt
	move.l	a0,bltbpt
	move.l	a2,bltcpt
	move.l	a2,bltdpt
	move.w	#[64*32]+3,bltsize
	add.l	#6*32,a0
	add.l	#40,a2
	dbra	d3,.loop
	rts
smartco:	dc.l	0
smart:
	cmp.l	#0,smartco
	beq.b	conti
	sub.l	#1,smartco
	move.l	smartco,d0
	and.w	#$f,d0
	move.w	d0,mavi
	rts
conti:
	move.w	#$23,mavi
	cmp.l	#7,herost
	blt.w	ret
	cmp.b	#$7f,$bfec01
	bne.w	ret
	cmp.l	#0,bomb
	beq.w	ret
	sub.l	#1,bomb
	lea	enemy_list,a0
	moveq.l	#enm-1,d0
smartair:
	cmp.l	#6,(a0)
	ble.b	.next
	move.l	#6,(a0)
.next:	lea	sizeofel(a0),a0
	dbf	d0,smartair

	lea	batterylist,a0
	moveq.l	#batterynum-1,d0
smartbat:
	cmp.l	#6,(a0)
	ble.b	.next
	move.l	#6,(a0)
.next:	lea	sizeofbat(a0),a0
	dbf	d0,smartbat

	lea	sea_list,a0
	moveq.l	#seaenm-1,d0
smartsea:
	cmp.l	#6,(a0)
	ble.b	.next
	move.l	#6,(a0)
.next:	lea	sizeofel(a0),a0
	dbf	d0,smartsea

	lea	fire_list,a0
	moveq.l	#firenum-1,d0
smartfire:
	clr.l	fdx(a0)
	clr.l	firex(a0)
	lea	sizeoffr(a0),a0
	dbf	d0,smartfire
	move.l	#12,smartco
	rts
real_start:
*_____________________________________________________________
	move.w	#0,intenbl
	move.w	#$24,sprcon
	clr.w	joydat
main:
	bsr	wait_wb
	bchg	#0,animswitch
	bsr.w	reality
	bsr.w	itemcon
	bsr.w	calc_values
	bsr.w	pre_st
	cmp.l	#son2,adress
	beq	exitprg
	cmp.l	#0,hak
	bne	w_left
	lea	herost,a6
	move.l	#5,(a6)
	bsr	setexp
	bra	exitprg
w_left:	btst	#7,$bfe001
	bne.s	main
*¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
exitprg:
	bsr.w	double_buffer
	bsr	screen_shot
	bsr.w	stopint
	bsr.w	StopCopper
stex:
	movem.l	(a7)+,d0-d7/a0-a6
	moveq	#0,d0
	rts
screen_shot:
	move.w	#$333,flash
	move.w	#$333,siyah
	move.w	#2,intenbl
	move.l	#7,d0
	clr.l	d2
.loop2:
	bsr	wait_wb
	move.l	#31,d1
	lea	cop1+2,a0
.loop1:
	move.w	d2,(a0)
	lea	4(a0),a0
	dbra	d1,.loop1
	add.w	#$222,d2
	dbra	d0,.loop2
	bsr	wait_wb
	lea	copfls,a0
	lea	cop1+2,a1
	move.l	#31,d0
.loop3:
	move.w	(a0)+,(a1)
	lea	4(a1),a1
	dbra	d0,.loop3
	move.l	#$100,d0
.loop4:	bsr	wait_wb
	move.l	#200,d1
.loop5:	dbra	d1,.loop5
	dbra	d0,.loop4
	move.w	#0,intenbl
	rts
bacount:	dc.w	0
planecount:	dc.w	12
reality:
	bsr.w	waspcontrol
	bsr.w	double_buffer
	bsr.w	press_line
	bsr.w	repair
	bsr.w	rocket_col
	bsr.w	hero_con
	bsr.w	activeallbatterys
	bsr.w	conaboat
	bsr.w	sea_enemy
	bsr.w	setexp
	bsr.w	setastrike
	bsr.w	moveafire
	bsr.w	set_enemy
	bsr.w	move_rockets
	move.w	joydat,d0
	btst	#4,d0
	beq.b	no_fire
	bsr.w	set_a_rocket
no_fire:
	rts
intenbl:	dc.w	0
StartCopper:
	lea	$dff000,a5
	move.l	#NEWCOPPER,$80(a5)
	rts
StopCopper:
	lea	$dff000,a5
	clr.w	$88(a5)
	rts
SETPLANE:
	lea	scr1cop,a0
	move.l	#scr1+[40*4*32],d0
	bsr.b	setpl

	lea	scr2cop,a0
	move.l	#scr2+[40*4*32],d0
	bsr.b	setpl

	lea	planeptr,a0
	move.l	#scr1+[40*4*32],d0
	bsr.b	setpl
	lea	planeptr2,a0
	move.l	#text.bm,d0
	move.l	d0,d1
	swap	d1
	move.w	d1,2(a0)
	move.w	d0,6(a0)
	rts
setpl:
	move.l	#3,d2
.loop:
	move.l	d0,d1
	swap	d1
	move.w	d1,2(a0)
	move.w	d0,6(a0)
	add.l	#8,a0
	add.l	#40,d0
	dbf	d2,.loop
	rts
wait_wb:
	cmp.b	#255,$dff006
	bne.s	wait_wb
	rts
DOUBLE_BUFFER:
	cmp.l	#scr1,workplane
	bne.b	show_scr2
	move.l	#7,d0
	lea	scr1cop,a0
	lea	planeptr,a1
.loop:
	move.l	(a0)+,(a1)+
	dbra	d0,.loop
	move.l	#scr2,workplane
	rts
show_scr2:	
	move.l	#7,d0
	lea	scr2cop,a0
	lea	planeptr,a1
.loop1:
	move.l	(a0)+,(a1)+
	dbra	d0,.loop1
	move.l	#scr1,workplane
	rts
;_____________________________________________________________________
StartInt:
	lea	$dff000,a5
	move.l	$6c.w,Level3Int+2
	lea	SOFTINT(pc),a0
	move.l	a0,$6c.w
	move.w	#$2004,$dff09a
	rts
ints:	dc.l	0
StopInt:
	lea	$dff000,a5
	move.l	Level3Int+2,$6c.w
	rts
SOFTINT:
	movem.l	d0-d7/a0-a6,-(a7)
	move.b	#1,vb
	cmp.w	#2,intenbl
	beq.b	no_act
	cmp.l	#0,hak
	beq	no_act
	bsr.w	show_must_go_on
	cmp.w	#0,intenbl
	bne.b	no_act1
	cmp.l	#6,herost
	ble.b	no_act1
	bsr.w	set_xy
	bsr.w	sethero
no_act1:bsr.w	move_items
no_act:
;	­­­­­­­­­­­­­­­­
Exit_Int:
	movem.l	(a7)+,d0-d7/a0-a6
Level3Int:
	jmp	0
Interrupts:	dc.w	0
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
vb:	dc.l	0
set_xy:
	clr.w	joydat
	bsr.w	joystick
	move.w	joydat,d0
	clr.l	d1
	clr.l	d2
	move.w	herost+4,d1
	move.w	herost+6,d2
	btst	#0,d0
	beq.b	.right
	sub.l	#1,d2
.right:	btst	#1,d0
	beq.b	.down
	add.l	#2,d1
	move.l	#9,herost
.down:	btst	#2,d0
	beq.b	.left
	add.l	#1,d2
.left:	btst	#3,d0
	beq.b	.no_action
	sub.l	#2,d1
	move.l	#8,herost
.no_action:
	and.l	#%01010,d0
	cmp.w	#$0,d0
	bne.b	.trep
	move.l	#7,herost
.trep:
	cmp.l	#258,d1
	ble.b	.no_prob1
	move.l	#258,d1
.no_prob1:
	cmp.l	#32,d1
	bge.b	.no_prob2
	moveq	#32,d1
.no_prob2:
	cmp.l	#178+32,d2
	ble.b	.no_prob3
	move.l	#178+32,d2
.no_prob3:
	cmp.l	#32,d2
	bge.b	.no_prob4
	moveq	#32,d2
.no_prob4:
	move.w	d1,herost+4
	move.w	d2,herost+6
nolp:
	rts
joystick:
	clr.w	joydat
	move.l	adress,a0
	cmp.l	#son2,a0
	beq	.next
	move.b	(a0)+,joydat+1
	move.l	a0,adress
	add.l	#1,lenght
.next:
	rts
joydat:	dc.w	0
herosw:	dc.l	0
Sethero:
	bchg	#0,herosw
	move.w	#$24,sprcon
	move.l	herost,d0
	cmp.l	#6,herost
	bgt.b	.next
	move.l	#9,d0
.next	sub.l	#7,d0
	asl.l	#1,d0
	asl.l	#8,d0
	
	move.l	ha,a0
	btst	#0,herosw
	beq.b	.trep
	move.l	hb,a0
.trep:
	add.l	d0,a0
	clr.l	d0
	clr.l	d1
	move.w	herost+4,d0
	move.w	herost+6,d1
	cmp.l	#6,herost
	bgt.b	.next3
	move.w	girisx,d0
	move.w	girisy,d1
.next3:	bsr.b	calchero
	move.l	d3,(a0)
	ori.b	#$80,d3
	move.l	d3,128(a0)
	add.l	#16,d0
	bsr.b	calchero
	move.l	d3,256(a0)
	ori.b	#$80,d3
	move.l	d3,384(a0)
	move.l	a0,d0
	lea	hero.spr,a0
	move.l	#3,d2
.loop:
	bsr.b	setcop
	add.l	#128,d0
	add.l	#8,a0
	dbra	d2,.loop	
ret2:	rts
setcop:
	move.l	d0,d1
	move.w	d1,6(a0)
	swap	d1
	move.w	d1,2(a0)
	rts
calchero:
	movem.l	d0-d2,-(a7)
	add.w	#128,d0
	add.w	#42-32,d1
	move.w	d1,d3
	add.w	#30,d3
	moveq	#0,d4
	lsl.w	#8,d1
	addx.b	d4,d4
	lsl.w	#8,d3
	addx.b	d4,d4
	or.w	d4,d3
	lsr.w	#1,d0
	addx.b	d3,d3
	or.w	d0,d1
	and.l	#$ffff,d3
	swap	d1
	and.l	#$ffff0000,d1
	or.l	d1,d3
	movem.l	(a7)+,d0-d2
	rts			
calcitem:
	movem.l	d0-d2,-(a7)
	add.w	#128,d0
	add.w	#42-32,d1
	move.w	d1,d3
	add.w	#16,d3
	moveq	#0,d4
	lsl.w	#8,d1
	addx.b	d4,d4
	lsl.w	#8,d3
	addx.b	d4,d4
	or.w	d4,d3
	lsr.w	#1,d0
	addx.b	d3,d3
	or.w	d0,d1
	and.l	#$ffff,d3
	swap	d1
	and.l	#$ffff0000,d1
	or.l	d1,d3
	movem.l	(a7)+,d0-d2
	rts			
frame:	dc.l	0
rocket_col:
	lea	rocket_list,a6
	move.l	rnum,d7
	subq.l	#1,d7
	lea	enemy_list,a5
	lea	sea_list,a4
	lea	batterylist,a3
re_rocont:
	move.w	rox(a6),d0
	move.w	roy(a6),d1
	cmp.l	#0,rocnum(a6)
	beq.b	next3
	bsr.b	shot_enm
	tst.l	d3
	beq.b	nothing
	bsr.w	shot_sea
	tst.l	d3
	beq.b	nothing
	bsr.w	shot_bat
	cmp.l	#0,d3
	bne.w	next3
nothing:
next3:	lea	sizeofrc(a6),a6
	dbra	d7,re_rocont
	rts
shot_enm:
	lea	enemy_list,a5
	moveq.l	#enm-1,d4
enmr:	cmp.l	#6,number(a5)
	bgt.b	cone
no_enm:	lea	sizeofel(a5),a5
	dbra	d4,enmr
	move.l	#-1,d3
	rts
cone:	move.w	ex(a5),d2
	move.w	ey(a5),d3
	sub.w	d0,d2
	sub.w	#6,d2
	sub.w	d1,d3
	btst	#15,d2
	beq.b	.sp1
	not.w	d2
	cmp.w	#31,d2
	bgt.b	no_enm
.sp1:	cmp.w	#22,d2
	bgt.b	no_enm
	btst	#15,d3
	beq.b	.sp2
	not.w	d3
.sp2:	cmp.w	#31,d3
	bgt.b	no_enm
	move.l	#6,number(a5)
	clr.l	rocnum(a6)
	moveq.l	#0,d3
	add.l	#5,scor
	rts
shot_sea:
	lea	sea_list,a5
	moveq.l	#seaenm-1,d4
enmr2:	cmp.l	#6,number(a5)
	bgt.b	cone2
no_enm2:lea	sizeofel(a5),a5
	dbra	d4,enmr2
	move.l	#-1,d3
	rts
cone2:	move.w	ex(a5),d2
	move.w	ey(a5),d3
	sub.w	d0,d2
	sub.w	d1,d3
	sub.w	#6,d2
	btst	#15,d2
	beq.b	.sp1
	not.w	d2
	cmp.w	#31,d2
	bgt.b	no_enm2
.sp1:	cmp.w	#22,d2
	bgt.b	no_enm2
	btst	#15,d3
	beq.b	.sp2
	not.w	d3
.sp2:	cmp.w	#32,d3
	bgt.b	no_enm2
	move.l	#6,number(a5)
	clr.l	rocnum(a6)
	moveq.l	#0,d3
	add.l	#15,scor
	rts
shot_bat:
	lea	batterylist,a5
	moveq.l	#batterynum-1,d4
enmr3:	cmp.l	#6,number(a5)
	bgt.b	cone3
no_enm3:lea	sizeofbat(a5),a5
	dbra	d4,enmr3
	move.l	#-1,d3
	rts
cone3:	move.w	bx(a5),d2
	move.w	by(a5),d3
	sub.w	d0,d2
	sub.w	d1,d3
	sub.w	#6,d2
	btst	#15,d2
	beq.b	.sp1
	not.w	d2
	cmp.w	#15,d2
	bgt.b	no_enm3
.sp1:	cmp.w	#15,d2
	bgt.b	no_enm3
	btst	#15,d3
	beq.b	.sp2
	not.w	d3
.sp2:	cmp.w	#15,d3
	bgt.b	no_enm3
	sub.w	#1,shotbat(a5)
	cmp.w	#0,shotbat(a5)
	bne.b	.next
	move.l	#6,number(a5)
	add.l	#5,scor
.next:
	clr.l	rocnum(a6)
	moveq.l	#0,d3
	rts
hero_con:
	cmp.l	#6,herost
	ble.w	ret
	lea	fire_list,a6
	moveq.l	#firenum-1,d7
fire_hero:
	cmp.l	#0,fdx(a6)
	bne.w 	confh
devam:	lea	sizeoffr(a6),a6
	dbra	d7,fire_hero

	lea	enemy_list,a6
	moveq.l	#enm-1,d7
enemy_hero:
	cmp.l	#6,number(a6)
	bgt.b	coneh
devam2:
	lea	sizeofel(a6),a6
	dbra	d7,enemy_hero
	rts
coneh:
	clr.l	d0
	clr.l	d1
	move.w	herost+4,d0
	move.w	herost+6,d1
	move.w	ex(a6),d2
	move.w	ey(a6),d3
	sub.w	d0,d2
	btst	#15,d2
	beq.b	.pl1
	not.w	d2
.pl1:	cmp.w	#29,d2
	bgt.b	devam2
	sub.w	d1,d3
	btst	#15,d3
	beq.b	.pl2
	not.w	d3
	cmp.w	#30,d3
	bgt.b	devam2
.pl2:	cmp.w	#24,d3
	bgt.b	devam2
	cmp.l	#0,waspcount
	bne.b	.wasp
	move.l	#6,herost
	bsr.w	terminate_hero
.wasp:
	move.l	#6,number(a6)
	rts
confh:	clr.l	d0
	clr.l	d1
	move.w	herost+4,d0
	move.w	herost+6,d1
	move.w	firex(a6),d2
	move.w	firey(a6),d3
	sub.w	d0,d2
	btst	#15,d2
	beq.b	.pl1
	not.w	d2
	cmp.w	#4,d2
	bgt.w	devam
.pl1:	cmp.w	#31,d2
	bgt.w	devam
	sub.w	d1,d3
	btst	#15,d3
	beq.b	.pl2
	not.w	d3
	cmp.w	#4,d3
	bgt.w	devam
.pl2:	cmp.w	#16,d3
	bgt.w	devam
	cmp.l	#0,waspcount
	bne.b	.wasp
	move.l	#6,herost
	bsr.b	terminate_hero
.wasp:
	clr.l	fdx(a6)
	clr.l	firex(a6)
	cmp.l	#0,waspcount
	beq.b	.wasp2
	add.l	#3,scor
.wasp2:
	rts
terminate_hero:
	sub.l	#1,hak
	move.l	#6,herost
	move.w	#1,intenbl
	move.w	#0,girisx
	move.w	#150,girisy
	move.w	#10,girisco
	bsr.w	sethero
	move.l	#wasp.a,ha
	move.l	#wasp.b,hb
	move.l	#100,waspcount
	move.l	rnum,mermibuf
	clr.w	joydat
	rts

show_must_go_on:
	cmp.w	#1,intenbl
	bne.w	ret
	cmp.l	#0,herost
	bne.w	ret
	cmp.w	#150,girisx
	ble.b	must_go
	move.l	#7,herost
	move.w	girisx,herost+4
	move.w	girisy,herost+6
	move.w	#0,intenbl
	rts
must_go:
	move.w	girisco,d0
	add.w	d0,girisx
	btst	#0,herosw
	beq.b	.next1
	cmp.w	#1,girisco
	beq.b	.next1
	sub.w	#1,girisco
.next1:
	bsr.w	sethero
	rts
girisco:dc.w	0
girisx:	dc.w	0
girisy:	dc.w	0
waspcontrol:
	cmp.l	#0,waspcount
	beq.w	ret
	sub.l	#1,waspcount
	cmp.l	#0,waspcount
	bne.b	.no_end
	move.l	#hero.a,ha
	move.l	#hero.b,hb
	move.w	#$023,flash
	move.l	mermibuf,rnum
	bsr	clrrocs
	bra.b	.no_end2
.no_end:
	cmp.l	#90,waspcount
	bgt.b	.no_end2
	move.w	waspcount+2,d0
	move.l	#wasp.a,ha
	move.l	#wasp.b,hb
	btst	#0,d0
	bne.b	.next
	move.l	#hero.a,ha
	move.l	#hero.b,hb
.next:
	and.w	#$f,d0
	move.w	d0,flash
.no_end2:
	rts	
herost:	dc.l	7,0
itemcon:
	cmp.l	#0,itemst
	beq.w	ret
	clr.l	d0

	move.w	itemst+4,d0
	sub.w	herost+4,d0
	btst	#15,d0
	beq.b	plusx
	not.w	d0
	cmp.w	#15,d0
	bgt.w	ret
	bra.b	controly
plusx:	cmp.w	#31,d0
	bgt.w	ret
controly:
	move.w	itemst+6,d0
	sub.w	herost+6,d0
	btst	#15,d0
	beq.b	plusy
	not.w	d0
	cmp.w	#15,d0
	bgt.w	ret
	bra.b	controled
plusy:	cmp.w	#31,d0
	bgt.w	ret
controled:
	move.l	#$1400000,itemst+4
	bsr.w	move_items
	move.l	itemst,d0
	clr.l	itemst
	cmp.l	#1,d0
	bne.b	maybesmart
	add.l	#1,hak
	rts
maybesmart:
	cmp.l	#2,d0
	bne.b	maybeweapon
	add.l	#1,bomb
	rts
maybeweapon:
	cmp.l	#3,d0
	bne.b	maybecash
	cmp.l	#0,waspcount
	bne.b	waspi
	cmp.l	#4,rnum
	beq.w	ret
	add.l	#1,rnum
	bsr	clrrocs
	rts
waspi:	cmp.l	#4,mermibuf
	beq.w	ret
	add.l	#1,mermibuf
	bsr	clrrocs
	rts
maybecash:
	cmp.l	#$4,d0
	bne.b	maybewasp
	add.l	#100,scor
	rts
ha:		dc.l	hero.a
hb:		dc.l	hero.b
waspcount:	dc.l	0
maybewasp:
	cmp.l	#6,d0
	bne.b	maybesubgun
	move.w	#$23,mavi
	move.l	#wasp.a,ha
	move.l	#wasp.b,hb
	move.l	#300,waspcount
	move.l	rnum,mermibuf
	move.l	#4,rnum
	bsr	clrrocs
	rts
maybesubgun:
	cmp.l	#5,d0
	bne.w	ret
	cmp.l	#0,waspcount
	bne.b	waspik
	cmp.l	#1,rnum
	beq.w	ret
	sub.l	#1,rnum
	bsr	clrrocs
	rts
waspik:	cmp.l	#1,mermibuf
	beq.w	ret
	sub.l	#1,mermibuf
	bsr	clrrocs
	rts
clrrocs:
	moveq.l	#3,d0
	lea	rocket_list,a0
.loop:	clr.l	(a0)
	lea	sizeofrc(a0),a0
	dbf	d0,.loop
	rts
mermibuf	dc.l	0
itemst:	dc.l	0,$1400064
move_items:
	cmp.l	#0,itemst
	beq.w	ret
	sub.w	#1,itemst+4
	bne.b	deva
	clr.l	itemst
	rts
deva:
	move.l	itemst,d0
	subq.l	#1,d0
	mulu	#17*4*2,d0
	lea	item.bin,a0
	lea	0(a0,d0.w),a0
	move.w	itemst+4,d0
	move.w	itemst+6,d1
	bsr.w	calcitem
	move.l	d3,(a0)
	ori.b	#$80,d3
	move.l	d3,17*4(a0)
	move.l	a0,d0
	lea	item.spr,a0
	bsr.w	setcop
	lea	8(a0),a0
	add.l	#17*4,d0
	bsr.w	setcop
	rts

press_line:
	sub.l	#1,yoffset
	and.l	#$fff,yoffset
	bsr.w	set_line
	bsr.w	battery
	moveq.l	#0,d0
	moveq.l	#15,d5
	lea	rplines,a1
	clr.l	d3
	move.w	rpoffset,d3
	lsl.w	#2,d3
	move.l	0(a1,d3.w),a1
.loop1:
	move.w	(a6)+,d0
	move.l	yoffset,d6
	btst	#15,d0
	beq.b	.no_prob
	not.b	d6
.no_prob:
	and.l	#$f,d6
	and.l	#$fff,d0
	divu	#20,d0
	move.l	d0,d1
	swap	d0
	and.l	#$ffff,d0
	and.l	#$ffff,d1
	lsl.l	#1,d0
	lsl.l	#4,d1
	add.w	d6,d1
	mulu	#40*4,d1
	add.l	d0,d1
	lea	backblk,a0
	add.l	d1,a0
	bsr.w	w_blit
	move.l	#-1,bltafwm
	move.w	#38,bltamod
	move.w	#38,bltdmod
	move.l	#$9f00000,bltcon0
	move.l	a0,bltapt
	move.l	a1,bltdpt
	move.w	#[64*4]+1,bltsize
	add.l	#2,a1
	dbra	d5,.loop1
den:
	cmp.w	#0,rpoffset
	bgt.b	no_op
	move.w	#200,rpoffset
no_op:	sub.w	#1,rpoffset
	rts
animswitch:	dc.l	0
rpoffset:	dc.w	0
rplines:	blk.l	232,0
repair:
	clr.l	d0
	lea	rplines,a0
	move.w	rpoffset,d0
	lsl.w	#2,d0
	move.l	0(a0,d0.w),a0
	move.l	workplane,a1
	add.l	#[40*4*31]+4,a1
	move.l	#200,d0
	sub.w	rpoffset,d0
	move.l	d0,d1
	bsr.b	repair_it

	lea	scrbuf,a0
	move.w	rpoffset,d0
	bsr.b	repair_it
	rts
w_blit:	tst.b	(a6)
	btst	#14,dmacon
	bne.b	w_blit
	rts
repair_it:
	cmp.w	#0,d0
	beq.b	ret
	move.w	d0,d2
	lsl.w	#7,d0
	add.w	#40,d0
	bsr.b	w_blit	
	move.l	a0,bltapt
	move.l	a1,bltdpt
	move.w	#0,bltamod
	move.w	#0,bltdmod
	move.l	#$9f00000,bltcon0
	move.l	#-1,bltafwm
	move.w	d0,bltsize
	mulu	#[40*4],d2
	add.l	d2,a1
ret:
	rts
SET_LINE:
	clr.l	mx
	move.l	yoffset,d0
	lsr.l	#4,d0
	move.w	d0,my+2
	bsr.b	findchar
	lea	linelist,a0
	moveq.l	#15,d0
.loop:
	move.w	(a6)+,(a0)+
	dbra	d0,.loop
	rts
FINDCHAR:
	move.l	my,d7
	lsl.l	#4,d7
	add.l	mx,d7
	lsl.l	#1,d7
	move.l	mapptr,a6
	lea	0(a6,d7),a6
	rts
mx:		dc.l	6
my:		dc.l	112
yoffset:	dc.l	255*16
linelist:	blk.l	40,0
workplane:	dc.l	scr1
mask_list:	blk.w	16,0
scr1cop:
	dc.w	$00e0,$0000,$00e2,$0000
	dc.w	$00e4,$0000,$00e6,$0000
	dc.w	$00e8,$0000,$00ea,$0000
	dc.w	$00ec,$0000,$00ee,$0000
scr2cop:
	dc.w	$00e0,$0000,$00e2,$0000
	dc.w	$00e4,$0000,$00e6,$0000
	dc.w	$00e8,$0000,$00ea,$0000
	dc.w	$00ec,$0000,$00ee,$0000
scr3cop:
	dc.w	$00e0,$0000,$00e2,$0000
	dc.w	$00e4,$0000,$00e6,$0000
	dc.w	$00e8,$0000,$00ea,$0000
	dc.w	$00ec,$0000,$00ee,$0000
mapptr:	dc.l	map1
	incdir	'ram:'
map1:	incbin	'map1.map'
firenum	=4-1
firex	=0
firey	=2
fdx	=4
fdy	=6
fst	=8
fcounter=10
sizeoffr=12
moveafire:
	lea	fire_list,a0
	moveq.l	#firenum-1,d0
re_fire:
	lea	fireenemya.mask+2,a2
	lea	fireenemya.blt+2,a1
	btst	#0,animswitch
	beq.b	no_sec
	lea	fireenemyb.mask+2,a2
	lea	fireenemyb.blt+2,a1
no_sec:	
	moveq.l	#0,d1
	moveq.l	#0,d2
	move.w	firex(a0),d1
	move.w	firey(a0),d2
	mulu	#40*4,d2
	move.l	d1,d3
	lsl.w	#8,d3
	lsl.w	#4,d3
	lsr.w	#4,d1
	lsl.w	#1,d1
	add.l	d2,d1
	move.l	workplane,a3
	add.l	d1,a3
	bsr.w	w_blit
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#36+[40*3],bltcmod
	move.w	#36+[40*3],bltdmod
	move.w	d3,bltcon1
	ori.w	#$fca,d3
	move.l	#-1,bltafwm
	move.w	d3,bltcon0
	moveq.l	#3,d1
.loop:
	bsr.w	w_blit
	move.l	a1,bltbpt
	move.l	a2,bltapt
	move.l	a3,bltcpt
	move.l	a3,bltdpt
	move.w	#[64*7]+2,bltsize
	lea	40(a3),a3
	lea	4*7(a1),a1
	dbra	d1,.loop

	cmp.w	#1,fst(a0)
	bne.b	yarttir

	move.w	fdx(a0),d1
	add.w	d1,firex(a0)
	add.b	#1,fcounter(a0)
	move.b	fcounter+1(a0),d1
	cmp.b	fcounter(a0),d1
	bne.b	conkor
	clr.b	fcounter(a0)
	move.w	fdy(a0),d1
	add.w	d1,firey(a0)
	bra.b	conkor
yarttir:
	move.w	fdy(a0),d1
	add.w	d1,firey(a0)
	add.b	#1,fcounter(a0)
	move.b	fcounter+1(a0),d1
	cmp.b	fcounter(a0),d1
	bne.b	conkor
	clr.b	fcounter(a0)
	move.w	fdx(a0),d1
	add.w	d1,firex(a0)
conkor:
	move.w	firex(a0),d1
	btst	#15,d1
	beq.b	no_cor1
	clr.l	fdx(a0)
	clr.w	firex(a0)
no_cor1:
	cmp.w	#320-32,d1
	blt.b	no_cor2
	move.w	#320-32,firex(a0)
	clr.l	fdx(a0)
no_cor2:
	move.w	firey(a0),d1
	btst	#15,d1
	beq.b	no_cor3
	clr.l	fdx(a0)
	clr.w	firey(a0)
no_cor3:
	cmp.w	#232,d1
	blt.b	no_cor4
	clr.l	fdx(a0)
	move.w	#232,firey(a0)
no_cor4:
	add.l	#sizeoffr,a0
	dbra	d0,re_fire
	rts
setafire:
	movem.l	d0-d7/a0-a6,-(a7)
	lea	fire_list,a0
	move.l	#firenum,d7
no_free:
	cmp.l	#0,fdx(a0)
	beq.b	ifind
	lea	sizeoffr(a0),a0
	dbra	d7,no_free
exi:
	movem.l	(a7)+,d0-d7/a0-a6
	rts
ifind:
	move.w	d5,firex(a0)
	move.w	d6,firey(a0)
	clr.l	d0
	clr.l	d1
	move.w	herost+4,d0
	move.w	herost+6,d1
	add.w	#10,d0
	add.w	#10,d1
	sub.w	d5,d0
	sub.w	d6,d1

	move.l	#$fffe0000,d2
	btst	#15,d0
	bne.b	pub1
	move.l	#$20000,d2
	cmp.w	#0,d0
	bne.b	pub1
	moveq.l	#0,d2
pub1:
	move.w	#-2,d2
	btst	#15,d1
	bne.b	pub2
	move.w	#2,d2
	cmp.w	#0,d1
	bne.b	pub2
	move.w	#0,d2
	cmp.w	#0,d0
	bne.b	pub2
	move.w	#2,d2
pub2:
	btst	#15,d0
	beq.b	pub3
	not.w	d0
	addq.l	#1,d0
pub3:
	btst	#15,d1
	beq.b	pub4
	not.w	d1
	addq.l	#1,d1
pub4:
	cmp.w	d0,d1
	bge.b	ybuyuk
	move.l	#$10001,d3	;x>=y
	cmp.w	#0,d1
	beq.b	pubson

	divu	d1,d0
	move.b	d0,d3
	bra.b	pubson
ybuyuk:
	move.l	#$00001,d3
	cmp.w	#0,d0
	beq.b	pubson
	divu	d0,d1
	move.b	d1,d3
pubson:
	asl.l	#1,d2
	move.l	d2,fdx(a0)
	move.l	d3,fst(a0)
	bra.w	exi

fire_list:
	blk.b	[firenum+1]*sizeoffr,0
setastrike:
	move.l	strikeptr,a0
	cmp.w	#$ffff,(a0)
	bne.b	no_son
	move.l	#strike_list,strikeptr
	rts
no_son:
	move.l	yoffset,d0
	cmp.w	(a0),d0
	bne.w	ret
	lea	enemy_list,a1
	move.l	#enm-1,d1
check_it:
	cmp.l	#0,(a1)
	beq.b	okey_yervar1
	add.l	#16,a1
	dbra	d1,check_it
	add.l	#12,strikeptr
	rts
okey_yervar1:
	move.l	2(a0),number(a1)
	move.l	6(a0),a2
	move.w	(a2)+,strcount(a1)
	move.l	a2,strstyle(a1)
	move.b	11(a0),fire_set(a1)
	move.b	11(a0),firetime(a1)
	add.l	#12,strikeptr
	rts
*­­­structure enemy_list­­­­
enm	=8
number	=0	;l
ex	=4	;w
ey	=6	;w
strstyle=8	;ptr
strcount=12	;w
firetime=14	;b
fire_set=15	;b
sizeofel=16
*­­­­­­­­­­­­­­­­­­­­­­­­­­­
set_enemy:
	moveq.l	#enm-1,d0
	lea	enemy_list,a6
loopana:
	move.l	number(a6),d1
	cmp.w	#6,d1
	ble.w	re_loop
	sub.l	#7,d1
	move.l	d1,d2
	mulu	#6*32*4,d1
	mulu	#6*32,d2
	sub.b	#1,firetime(a6)
	bne.b	no_prob5
	move.b	fire_set(a6),firetime(a6)
	move.w	ex(a6),d5
	move.w	ey(a6),d6
	add.w	#10,d5
	add.w	#10,d5
	bsr.w	setafire
no_prob5:
	sub.w	#1,strcount(a6)
	bne.b	.no_prob
	clr.l	(a6)
	clr.l	ex(a6)
	clr.l	strstyle(a6)
	clr.l	strcount(a6)
	bra.w	re_loop
.no_prob:
	move.l	strstyle(a6),a0
	move.l	(A0)+,ex(a6)
	move.l	a0,strstyle(a6)
	lea	airenemsa+2,a0
	lea	airenemsa.mask+2,a1
	btst	#0,animswitch
	beq.b	.no_prob1
	lea	airenemsb+2,a0
	lea	airenemsb.mask+2,a1
.no_prob1:
	lea	0(a1,d2),a1
	lea	0(a0,d1),a0
	moveq.l	#0,d1
	moveq.l	#0,d2
	move.w	ey(a6),d1
	mulu	#40*4,d1
	move.w	ex(a6),d2
	move.w	d2,d3
	lsr.w	#3,d2
	and.b	#$fe,d2
	add.w	d2,d1
	move.l	workplane,a2
	add.l	d1,a2

	lsl.w	#8,d3
	lsl.w	#4,d3
	bsr.w	w_blit
	and.l	#$f000,d3
	move.w	d3,bltcon1
	ori.w	#$fca,d3
	move.w	d3,bltcon0
	move.l	#-1,bltafwm
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#34+[40*3],bltcmod
	move.w	#34+[40*3],bltdmod
	moveq.l	#3,d3
.loop:
	bsr.w	w_blit
	move.l	a1,bltapt
	move.l	a0,bltbpt
	move.l	a2,bltcpt
	move.l	a2,bltdpt
	move.w	#[64*32]+3,bltsize
	add.l	#6*32,a0
	add.l	#40,a2
	dbra	d3,.loop
re_loop:
	add.l	#sizeofel,a6
	dbra	d0,loopana
	rts
enemy_list:
	blk.b	sizeofel*enm,0
*­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
setexp:
	move.l	#enm-1,d0
	lea	enemy_list,a6
re_exp:	cmp.l	#7,(a6)
	bge.b	noop
	bsr.b	exvenob
noop:	lea	sizeofel(a6),a6
	dbra	d0,re_exp

	move.l	#seaenm-1,d0
	lea	sea_list,a6
re_exp1:cmp.l	#7,(a6)
	bge.b	noop1
	bsr.b	exvenob
noop1:	lea	sizeofel(a6),a6
	dbra	d0,re_exp1

	move.l	#batterynum-1,d0
	lea	batterylist,a6
	move.l	#-1,d7
re_exp2:cmp.l	#7,(a6)
	bge.b	noop2
	bsr.b	exvenob
noop2:	lea	sizeofbat(a6),a6
	dbra	d0,re_exp2
	moveq.l	#0,d7
	lea	herost,a6
	cmp.l	#6,(a6)
	ble.b	exvenob
	rts
exvenob:
	cmp.w	#232,ey(a6)
	blt.b	no_pl2
	clr.l	number(a6)
no_pl2:	move.l	number(a6),d1
	beq.b	no_pl
	add.w	#1,ey(a6)
	CMP.L	#0,D1
	BEQ.B	NO_PL
	btst	#0,animswitch
	beq.b	no_pl
	sub.l	#1,number(a6)
no_pl:
	lea	expvenob.blt+2,a0
	lea	expvenob.mask+2,a1	
	move.l	d1,d2
	mulu	#6*32*4,d1
	mulu	#6*32,d2
	lea	0(a1,d2),a1
	lea	0(a0,d1),a0
	moveq.l	#0,d1
	moveq.l	#0,d2
	move.w	ey(a6),d1
	cmp.w	#-1,d7
	bne.b	.next
	sub.l	#8,d1
.next:	mulu	#40*4,d1
	move.w	ex(a6),d2
	cmp.w	#-1,d7
	bne.b	.next2
	sub.l	#8,d2
.next2:	move.w	d2,d3
	lsr.w	#3,d2
	and.b	#$fe,d2
	add.w	d2,d1
	move.l	workplane,a2
	add.l	d1,a2

	lsl.w	#8,d3
	lsl.w	#4,d3
	bsr.w	w_blit
	and.l	#$f000,d3
	move.w	d3,bltcon1
	ori.w	#$fca,d3
	move.w	d3,bltcon0
	move.l	#-1,bltafwm
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#34+[40*3],bltcmod
	move.w	#34+[40*3],bltdmod
	moveq.l	#3,d3
.loop:
	bsr.w	w_blit
	move.l	a1,bltapt
	move.l	a0,bltbpt
	move.l	a2,bltcpt
	move.l	a2,bltdpt
	move.w	#[64*32]+3,bltsize
	add.l	#6*32,a0
	add.l	#40,a2
	dbra	d3,.loop
	rts
*­­­­­­­­­­­­­­­­­­­
batterynum=8
bnum	=0
bx	=4
by	=6
bfire	=8
bfireset=9
shotbat=10
sizeofbat=12
activeallbatterys:
	lea	batterylist,a6
	moveq.l	#batterynum-1,d4
analoop2:
	clr.l	d0
	clr.l	d1
	move.w	herost+4,d0
	move.w	herost+6,d1
	move.w	bx(a6),d2
	move.w	by(a6),d3
	cmp.l	#7,bnum(a6)
	blt.w	no_pro8
	lea	batterya.blt+2,a0
	lea	batterya.mask+2,a1
	cmp.b	#10,bfire(a6)
	bgt	.noprt
	lea	batteryb.blt+2,a0
	lea	batteryb.mask+2,a1
.noprt:
	cmp.b	#5,bfire(a6)
	bne.b	no_bfire
	move.w	bx(a6),d5
	move.w	by(a6),d6
	add.w	#6,d5
	add.w	#9,d6
	bsr.w	setafire
no_bfire:
	sub.b	#1,bfire(a6)
	cmp.b	#0,bfire(a6)
	bne.b	.next
	move.b	bfireset(a6),bfire(a6)

.next:	move.l	number(a6),d1
	subq.l	#7,d1
	asl.l	#6,d1
	move.l	d1,d2
	asl.l	#2,d2
	add.l	d2,a0
	add.l	d1,a1
	moveq.l	#0,d1
	moveq.l	#0,d2
	move.l	workplane,a2
	move.w	bx(a6),d1
	move.w	by(a6),d2
	mulu	#40*4,d2
	lsr.w	#4,d1
	lsl.w	#1,d1
	add.l	d1,d2
	add.l	d2,a2
	bsr.w	w_blit
	move.l	#-1,bltafwm
	move.l	#$fca0000,bltcon0
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#36+[40*3],bltcmod
	move.w	#36+[40*3],bltdmod
	moveq.l	#3,d1
.loop:
	bsr.w	w_blit
	move.l	a0,bltbpt
	move.l	a1,bltapt
	move.l	a2,bltcpt
	move.l	a2,bltdpt
	move.w	#[64*16]+2,bltsize
	lea	40(a2),a2
	lea	4*16(a0),a0
	dbra	d1,.loop
	cmp.w	#232,by(a6)
	blt.b	no_pro8a
	clr.l	bnum(a6)
no_pro8a:
	add.w	#1,by(a6)
no_pro8:lea	sizeofbat(a6),a6
	dbra	d4,analoop2
	rts
battery:
	movem.l	d3/a0,-(a7)
	move.l	yoffset,d3
	and.l	#$f,d3
	cmp.w	#$f,d3
	bne.b	exbat
	lea	linelist,a0
	moveq.l	#0,d3
re_bat:
	move.w	(a0)+,d1
	and.l	#$fff,d1
	cmp.w	#bloc,d1
	blt.b	no_bat
	bsr.b	setabattery
no_bat:
	addq.l	#1,d3
	cmp.w	#16,d3
	bne.b	re_bat
exbat:	movem.l	(a7)+,d3/a0
	rts
bloc=$13c
setabattery:
	movem.l	d0/d3/a0,-(a7)
	lea	batterylist,a0
	moveq.l	#batterynum-1,d0
.loop:
	cmp.l	#0,bnum(a0)
	beq.b	found
	lea	sizeofbat(a0),a0
	dbra	d0,.loop
	movem.l	(a7)+,d0/d3/a0
 	rts
found:	lsl.w	#4,d3
	add.w	#32,d3
	sub.w	#bloc,d1
	move.l	d1,(a0)		;number
	add.l	#7,(a0)+
	move.w	d3,(a0)+
	move.w	#1,(a0)+
	move.w	#$0190,(a0)
	bchg	#0,batsw
	btst	#0,batsw
	bne.b	.no_di
	move.w	#$3080,(a0)
.no_di:	
	add.l	#2,a0
	add.l	#1,d1
	move.w	d1,(a0)
	movem.l	(a7)+,d0/d3/a0
	rts
batsw:	dc.l	0

batterylist:
	blk.b	sizeofbat*batterynum,0
*­­­structure sea enemy_list­­­­
seaenm	=5
*­­­­­­­­­­­­­­­­­­­­­­­­­­­
conaboat:
	move.l	yoffset,d0
	and.l	#$f,d0
	cmp.w	#$f,d0
	bne.w	ret
new_con:
	move.w	linelist,d0
	and.l	#$f000,d0
	cmp.l	#0,d0
	beq.w	ret
itemmi:	cmp.w	#$1000,d0
	beq.b	itemdegil
	asr.w	#8,d0
	asr.w	#4,d0
	subq.w	#1,d0
	move.b	d0,itemst+3
	move.l	#$1400064,itemst+4
	rts
itemdegil:
	lea	sea_list,a1
	move.l	#seaenm-1,d0
re_gun:
	cmp.l	#0,(a1)
	beq.b	set_gunboat
	add.l	#sizeofel,a1
	dbra	d0,re_gun
	rts
set_gunboat:
	move.l	strikeptrsea,a0
	cmp.l	#-1,(a0)
	bne.b	no_opr
	move.l	#strikelistsea,strikeptrsea
	move.l	#strikelistsea,a0
no_opr:	
	move.l	0(a0),number(a1)
	move.l	4(a0),a2
	move.w	(a2)+,strcount(a1)
	move.l	a2,strstyle(a1)
	move.b	9(a0),fire_set(a1)
	move.b	9(a0),firetime(a1)
	add.l	#10,strikeptrsea
	rts

sea_enemy:
	moveq.l	#seaenm-1,d0
	lea	sea_list,a6
sea_loopana:
	move.l	number(a6),d1
	cmp.w	#6,d1
	ble.w	sea_re_loop
	sub.l	#7,d1
	move.l	d1,d2
	mulu	#6*32*4,d1
	mulu	#6*32,d2
	sub.b	#1,firetime(a6)
	bne.b	sea_no_prob5
	move.b	fire_set(a6),firetime(a6)
	move.w	ex(a6),d5
	move.w	ey(a6),d6
	add.w	#14,d5
	add.w	#8,d5
	bsr.w	setafire
sea_no_prob5:
	sub.w	#1,strcount(a6)
	bne.b	.no_prob
	clr.l	(a6)
	clr.l	ex(a6)
	clr.l	strstyle(a6)
	clr.l	strcount(a6)
	bra.w	sea_re_loop
.no_prob:
	move.l	strstyle(a6),a0
	move.l	(A0)+,ex(a6)
	move.l	a0,strstyle(a6)
	lea	seaenemsa+2,a0
	lea	seaenemsa.mask+2,a1
	btst	#0,animswitch
	beq.b	.no_prob1
	lea	seaenemsb+2,a0
	lea	seaenemsb.mask+2,a1
.no_prob1:
	lea	0(a1,d2),a1
	lea	0(a0,d1),a0
	moveq.l	#0,d1
	moveq.l	#0,d2
	move.w	ey(a6),d1
	mulu	#40*4,d1
	move.w	ex(a6),d2
	move.w	d2,d3
	lsr.w	#3,d2
	and.b	#$fe,d2
	add.w	d2,d1
	move.l	workplane,a2
	add.l	d1,a2

	lsl.w	#8,d3
	lsl.w	#4,d3
	bsr.w	w_blit
	and.l	#$f000,d3
	move.w	d3,bltcon1
	ori.w	#$fca,d3
	move.w	d3,bltcon0
	move.l	#-1,bltafwm
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#34+[40*3],bltcmod
	move.w	#34+[40*3],bltdmod
	moveq.l	#3,d3
.loop:
	bsr.w	w_blit
	move.l	a1,bltapt
	move.l	a0,bltbpt
	move.l	a2,bltcpt
	move.l	a2,bltdpt
	move.w	#[64*32]+3,bltsize
	add.l	#6*32,a0
	add.l	#40,a2
	dbra	d3,.loop
sea_re_loop:
	add.l	#sizeofel,a6
	dbra	d0,sea_loopana
	rts
sea_list:
	blk.b	sizeofel*seaenm,0
rnum:	dc.l	1
rocnum	=0
rox	=4
roy	=6
sizeofrc=8
set_df:
	sub.w	#1,rocfl
	rts
rocfl:	dc.w	0
set_a_rocket:
	cmp.w	#0,rocfl
	bne.b	set_df	
	lea	rocket_list,a6
	move.l	#4,d4
	subq.l	#1,d4
re_ro:	cmp.l	#0,rocnum(a6)
	beq.b	new_rocket
	add.l	#sizeofrc,a6
	dbra	d4,re_ro
	rts
new_rocket:
	move.l	#1,rocnum(a6)
	move.w	herost+4,rox(a6)
	move.w	herost+6,roy(a6)
	add.w	#1,roy(a6)
	move.w	#2,rocfl
	rts
move_rockets:
	lea	rocket_list,a6
	move.l	rnum,d4
	subq.l	#1,d4
ana_rocs:
	sub.w	#16,roy(a6)
	cmp.w	#32,roy(a6)
	bgt.b	no_probl
	clr.l	rocnum(a6)
no_probl:
	moveq.l	#0,d0
	moveq.l	#0,d1
	move.w	roy(a6),d1
	mulu	#40*4,d1
	move.w	rox(a6),d0
	move.l	d0,d2
	lsr.w	#4,d0
	lsl.w	#1,d0
	add.l	d0,d1
	move.l	workplane,a2
	add.l	d1,a2

	lsl.w	#8,d2
	lsl.w	#4,d2
	and.w	#$f000,d2
	lea	rocket.blt+2,a0
	lea	rocket.mask+2,a1
	cmp.l	#0,rocnum(a6)
	bne	.next
	lea	expvenob.blt+2,a0
	lea	expvenob.mask+2,a1
	move.l	workplane,a2
	clr.l	d2
.next:	move.l	rnum,d0
	subq.l	#1,d0
	mulu	#6*16,d0
	add.l	d0,a1
	asl.l	#2,d0
	add.l	d0,a0
	bsr.w	w_blit
	move.l	#-1,bltafwm
	move.w	d2,bltcon1
	or.w	#$fca,d2
	move.w	d2,bltcon0
	move.w	#0,bltamod
	move.w	#0,bltbmod
	move.w	#34+[40*3],bltcmod
	move.w	#34+[40*3],bltdmod
	moveq.l	#3,d0
.loop:
	bsr.w	w_blit
	move.l	a0,bltbpt
	move.l	a1,bltapt
	move.l	a2,bltcpt
	move.l	a2,bltdpt
	move.w	#[64*15]+3,bltsize
	lea	40(a2),a2
	lea	6*16(a0),a0
	dbra	d0,.loop
no_rocket:
	lea	sizeofrc(a6),a6
	dbra	d4,ana_rocs
	rts
rocket_list:	blk.b	sizeofrc*9,0
pre_st:
	move.l	textptr,a0	
	lea	text.bm+4,a1
	moveq.l	#35,d0
.loop:	moveq.l	#0,d1
	move.b	(a0)+,d1
	sub.b	#' ',d1
	lsl.w	#3,d1
	lea	font.bm,a2
	lea	(a2,d1.w),a2
	move.b	(a2)+,(a1)
	move.b	(a2)+,[40*1](a1)
	move.b	(a2)+,[40*2](a1)
	move.b	(a2)+,[40*3](a1)
	move.b	(a2)+,[40*4](a1)
	move.b	(a2)+,[40*5](a1)
	move.b	(a2)+,[40*6](a1)
	move.b	(a2)+,[40*7](a1)
	lea	1(a1),a1
	dbra	d0,.loop
	rts
calc_values:
	move.l	scor,d0
	and.l	#$ffff,d0
	bsr.b	con_val
	lea	scrloc+scorer,a0
	lea	asci_value,a1
	move.l	(a1)+,(a0)+
	move.b	(a1),(a0)

	and.l	#$1f,bomb
	move.l	bomb,d0
	bsr.b	con_val
	lea	bombloc+scorer,a0
	lea	asci_value+3,a1
	move.b	(a1)+,(a0)+
	move.b	(a1),(a0)

	and.l	#$f,hak
	move.l	hak,d0
	bsr.b	con_val
	lea	hakloc+scorer,a0
	lea	asci_value+3,a1
	move.b	(a1)+,(a0)+
	move.b	(a1),(a0)
	rts	

con_val:
	moveq.l	#4,d7
	lea	asci_value,a5
	move.l	#10000,d1
.loop:
	divu	d1,d0
	move.l	d0,d2
	swap	d0
	and.l	#$ffff,d0
	and.l	#$ffff,d2
	add.b	#'0',d2
	move.b	d2,(a5)+
	divu	#10,d1
	and.l	#$ffff,d1
	dbra	d7,.loop
	rts
asci_value:dc.b	'000000'
*­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
strikeptr:	dc.l	strike_list
strikeptrsea:	dc.l	strikelistsea

*­­­­­­­­­­­­­­­­­­­­AIR­­­­­­­­­­­­­­­­­­­
strike_list:
	setair	$e90,4,str1,$40
	setair	$e80,4,str1,$40
	setair	$e70,4,str1,$40
	setair	$e60,4,str1,$40

	setair	$e00,6,str7,$40
	setair	$df0,6,str7,$40
	setair	$de0,6,str7,$40
	setair	$dd0,6,str7,$40

	setair	$d30,15,str17,$10
	setair	$d20,16,str18,$40
	setair	$d01,15,str17,$40
	setair	$d00,16,str18,$40

	setair	$c80,2,str12,$40
	setair	$c70,2,str12,$40
	setair	$c60,2,str12,$40
	setair	$c50,2,str12,$40

	setair	$ba0,1,str4,$40
	setair	$b90,1,str4,$40
	setair	$b80,1,str4,$40
	setair	$b70,1,str4,$40

	setair	$b10,6,str11,$40
	setair	$b00,6,str11,$40
	setair	$af0,6,str11,$40
	setair	$ae8,9,str5,$40
	setair	$ae0,6,str11,$40

	setair	$a50,9,str5,$f0
	setair	$a40,9,str5,$f0
	setair	$a30,9,str5,$f0
	setair	$a20,9,str5,$f0

	setair	$9c0,15,str17,$40
	setair	$9a8,9,str5,$f0
	setair	$998,9,str5,$f0
	setair	$990,16,str18,$40

	setair	$910,11,str6,$40
	setair	$900,11,str6,$40
	setair	$8f0,11,str14,$40
	setair	$8d0,11,str14,$40

	setair	$840,6,str10,$40
	setair	$800,6,str10,$40

	setair	$790,7,str20,$40
	setair	$780,8,str19,$40
	setair	$770,7,str20,$40
	setair	$750,8,str19,$40

	setair	$6e8,9,str5,$f0
	setair	$6e4,7,str20,$40
	setair	$6e0,9,str5,$f0
	setair	$6d0,8,str19,$40
	setair	$6c0,9,str5,$f0
	setair	$6b0,9,str5,$f0

	setair	$5f0,16,str20,$40
	setair	$5e0,8,str19,$40
	setair	$5d8,9,str5,$f0
	setair	$5d0,7,str20,$40
	setair	$5c0,15,str19,$40

	setair	$560,6,str16,$30
	setair	$558,9,str5,$f0
	setair	$550,6,str16,$30
	setair	$548,9,str5,$f0
	setair	$540,6,str16,$30
	setair	$538,9,str5,$f0
	setair	$530,6,str16,$30

	setair	$4d0,6,str15,$40
	setair	$4c8,9,str5,$f0
	setair	$4c0,6,str15,$40
	setair	$4b8,9,str5,$f0

	setair	$480,4,str8,$40
	setair	$47c,16,str20,$40
	setair	$470,4,str8,$40
	setair	$46c,15,str19,$40
	setair	$460,4,str8,$40
	setair	$44c,16,str20,$40
	setair	$440,4,str8,$40
	setair	$43c,15,str19,$40

	setair	$430,16,str20,$40
	setair	$42a,15,str19,$40
	setair	$425,16,str20,$40
	setair	$420,15,str19,$40
	setair	$41a,15,str19,$40
	setair	$415,16,str20,$40
	setair	$410,15,str19,$40

	setair	$3e0,6,str2,$40
	setair	$3d8,9,str5,$f0

	setair	$380,1,str11,$40
	setair	$360,1,str11,$40
	setair	$340,15,str15,$10
	setair	$320,1,str11,$40

	dc.l	-1,-1,-1,-1
*­­­­­­­­­­­­­­­­­­­­SEA­­­­­­­­­­­­­­­­­­­
strikelistsea:
	setsea	1,seastr4,$30
	setsea	2,seastr2,$30
	setsea	2,seastr2,$30
	setsea	4,seastr4,$30
	setsea	8,seastr4,$10
	setsea	4,seastr4,$30
	setsea	3,seastr2,$30
	setsea	3,seastr1,$30
	setsea	5,seastr5,$10
	setsea	5,seastr4,$30
	setsea	2,seastr1,$30
	setsea	7,seastr2,$30
	setsea	8,seastr4,$20
	setsea	7,seastr1,$10
	dc.l	-1,-1,-1
;___________STRIKE LIST_____________
str1:	incbin	'airstrike1'
str2:	incbin	'airstrike2'
str3:	incbin	'airstrike3'
str4:	incbin	'airstrike4'
str5:	incbin	'airstrike5'
str6:	incbin	'airstrike6'
str7:	incbin	'airstrike7'
str8:	incbin	'airstrike8'
str9:	incbin	'airstrike9'
str10:	incbin	'airstrike10'
str11:	incbin	'airstrike11'
str12:	incbin	'airstrike12'
str13:	incbin	'airstrike13'
str14:	incbin	'airstrike14'
str15:	incbin	'airstrike15'
str16:	incbin	'airstrike16'
str17:	incbin	'airstrike17'
str18:	incbin	'airstrike18'
str19:	incbin	'airstrike19'
str20:	incbin	'airstrike20'
seastr1:incbin	'seastrike1'
seastr2:incbin	'seastrike2'
seastr3:incbin	'seastrike3'
seastr4:incbin	'seastrike4'
seastr5:incbin	'seastrike5'
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
scor:	dc.l	0
bomb:	dc.l	3
hak:	dc.l	3
scrloc	=6
bombloc	=22
hakloc	=30
textptr:dc.l	scorer
scorer:	dc.b	'SCORE:000000    SMART:00 LIFE:00    '
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
	even
	blk.l	200,0
stack:
	blk.l	200,0
copfls:	dc.w	$0333,$0FFF,$0CCC,$0999,$0555,$0333,$0000,$0888
	dc.w	$0999,$0666,$0EEE,$0EEE,$0AAA,$0888,$0666,$0555
	;Generated by IFFMaster v1.0 by JUNIX / ARCANE!
	dc.w	$0333,$0FFF,$0CCC,$0999,$0555,$0333,$0000,$0CCC
	dc.w	$0999,$0666,$0888,$0FFF,$0FFF,$0AAA,$0888,$0555
	;Generated by IFFMaster v1.0 by JUNIX / ARCANE!


*_____________________________________________________________
NEWCOPPER:
hero.spr:
	dc.l	$01200000,$01220000,$01240000,$01260000
	dc.l	$01280000,$012a0000,$012c0000,$012e0000
item.spr:
	dc.l	$01300000,$01320000,$01340000,$01360000
	dc.l	$01380000,$013a0000,$013c0000,$013e0000
	dc.w	$008e,$29a1,$0090,$29a1,$0092,$0038,$0094,$00d0
	dc.w	$0102,$0000,$0104
sprcon:	dc.w	$0024,$0108,$0078,$010a,$0078
	dc.w	$0100,$0200,$01a2,$0ff0
	dc.w	$180,$23
openi:	dc.w	$2301,$ff00
PlanePtr:
	dc.w	$00e0,$0000,$00e2,$0000
	dc.w	$00e4,$0000,$00e6,$0000
	dc.w	$00e8,$0000,$00ea,$0000
	dc.w	$00ec,$0000,$00ee,$0000
	dc.w	$0100,$4200
cop1:	dc.w	$0180
mavi:	dc.w	$0023
	dc.w	$0182,$0FDB
	dc.w	$0184,$0CA9
	dc.w	$0186,$0977
	dc.w	$0188,$0554
	dc.w	$018A,$0332
	dc.w	$018C,$0000
	dc.w	$018E,$0680
	dc.w	$0190,$0986
	dc.w	$0192,$0460
	dc.w	$0194,$0E00
	dc.w	$0196,$0EEE
	dc.w	$0198,$0AAA
	dc.w	$019A,$0078
	dc.w	$019C,$0056
	dc.w	$019E,$0045
cop2:
	dc.w	$01a0,$0023,$01a2,$0fdb,$01a4,$0ca9,$01a6,$0977
	dc.w	$01a8,$0554,$01aa,$0332,$01ac,$0000,$01ae,$0c33
	dc.w	$01b0,$0986,$01b2,$0640,$01b4,$0086,$01b6,$0fc0
	dc.w	$01b8,$0c0f,$01ba,$080a,$01bc,$0808,$01be,$0505


	dc.w	$f001,$ff00,$0100,$0200
	dc.w	$f101,$ff00,$0100,$1200,$10a,0,$108,0,$182,$ddd
planeptr2:
	dc.w	$00e0,$0000,$00e2,$0000
	dc.w	$f201,$ff00,$180
flash:	dc.w	$023
	dc.w	$f501,$ff00,$182,$fe0
	dc.w	$f601,$ff00,$182,$f70
	dc.w	$f701,$ff00,$182,$f11

	dc.w	$f801,$ff00,$100,$0200
	dc.w	$f901,$ff00,$180
siyah:	dc.w	$023
	dc.l	-2


*¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
font.bm:	dc.l	0,0
		incbin	'font.bm'
backblk:	incbin	'level1.blk'
expvenob.blt:	incbin	'explode.blt'
expvenob.mask:	incbin	'explode.mask'
airenemsa:	incbin	'enemyairaa.blt'
airenemsa.mask:	incbin	'enemyairaa.mask'
airenemsb:	incbin	'enemyairbb.blt'
airenemsb.mask:	incbin	'enemyairbb.mask'
fireenemya.blt:	incbin	'firea.blt'
fireenemya.mask:incbin	'firea.mask'
fireenemyb.blt:	incbin	'fireb.blt'
fireenemyb.mask:incbin	'fireb.mask'
batterya.blt:	incbin	'batterya.blt'
batterya.mask:	incbin	'batterya.mask'
batteryb.blt:	incbin	'batteryb.blt'
batteryb.mask:	incbin	'batteryb.mask'
seaenemsa:	incbin	'enemysea-a.blt'
seaenemsa.mask:	incbin	'enemysea-a.mask'
seaenemsb:	incbin	'enemysea-b.blt'
seaenemsb.mask:	incbin	'enemysea-b.mask'
rocket.blt:	incbin	'roketa.blt'
rocket.mask:	incbin	'roketa.mask'
hero.a:		incbin	'hero.a'
hero.b:		incbin	'hero.b'
wasp.a:		incbin	'wasp.a'
wasp.b:		incbin	'wasp.b'
item.bin:	incbin	'items.spr'
*_____________________________________
scr1:		blk.b	264*40*4,0
scr2:		blk.b	264*40*4,0
		blk.b	264*40,0
scrbuf:		blk.b	264*40*4,$ff
text.bm:	blk.b	40*8,$f0
*¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
adress:	dc.l	son1+10
lenght:	dc.l	0
son1:	incbin	'demo.dat'
son2:
